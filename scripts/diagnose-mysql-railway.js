#!/usr/bin/env node

const mysql = require('mysql2/promise');

async function diagnoseMySQLRailway() {
  console.log('üîç DIAGNOSTIC MYSQL RAILWAY\n');
  
  // Check environment variables
  console.log('üìã Variables d\'environnement :');
  console.log('- DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ D√©finie' : '‚ùå Manquante');
  console.log('- DATABASE_HOST:', process.env.DATABASE_HOST || 'Non d√©finie');
  console.log('- DATABASE_PORT:', process.env.DATABASE_PORT || 'Non d√©finie');
  console.log('- DATABASE_USER:', process.env.DATABASE_USER ? '‚úÖ D√©finie' : '‚ùå Manquante');
  console.log('- DATABASE_PASSWORD:', process.env.DATABASE_PASSWORD ? '‚úÖ D√©finie' : '‚ùå Manquante');
  console.log('- DATABASE_NAME:', process.env.DATABASE_NAME || 'Non d√©finie');
  console.log('- DATABASE_SSL:', process.env.DATABASE_SSL || 'Non d√©finie');
  console.log('');
  
  if (!process.env.DATABASE_URL) {
    console.log('‚ùå DATABASE_URL manquante !');
    console.log('üîß Dans Railway :');
    console.log('1. Allez dans votre service principal');
    console.log('2. Variables ‚Üí Ajoutez : DATABASE_URL=${{MySQL.MYSQL_URL}}');
    console.log('3. Remplacez "MySQL" par le nom exact de votre service MySQL');
    return;
  }
  
  // Parse DATABASE_URL
  let config;
  try {
    const url = new URL(process.env.DATABASE_URL);
    config = {
      host: url.hostname,
      port: parseInt(url.port) || 3306,
      user: decodeURIComponent(url.username),
      password: decodeURIComponent(url.password),
      database: url.pathname.replace(/^\//, ''),
      ssl: {
        rejectUnauthorized: false
      }
    };
    
    console.log('üîó Configuration de connexion :');
    console.log('- Host:', config.host);
    console.log('- Port:', config.port);
    console.log('- Database:', config.database);
    console.log('- User:', config.user);
    console.log('- SSL: Activ√© (rejectUnauthorized: false)');
    console.log('');
    
  } catch (error) {
    console.error('‚ùå DATABASE_URL invalide :', error.message);
    console.log('üîß V√©rifiez le format : mysql://user:password@host:port/database');
    return;
  }
  
  // Test connection
  console.log('üîå Test de connexion MySQL...');
  let connection;
  try {
    connection = await mysql.createConnection(config);
    console.log('‚úÖ Connexion MySQL r√©ussie !');
    
    // Test basic query
    console.log('üß™ Test de requ√™te de base...');
    const [rows] = await connection.execute('SELECT 1 as test, NOW() as current_time');
    console.log('‚úÖ Requ√™te r√©ussie :', rows[0]);
    
    // Check database
    console.log('üóÑÔ∏è V√©rification de la base de donn√©es...');
    const [databases] = await connection.execute('SHOW DATABASES');
    console.log('‚úÖ Bases de donn√©es disponibles :');
    databases.forEach(db => console.log(`   - ${db.Database}`));
    
    // Check if our database exists
    const dbExists = databases.some(db => db.Database === config.database);
    if (!dbExists) {
      console.log(`‚ùå Base de donn√©es "${config.database}" n'existe pas !`);
      console.log('üîß Cr√©ation de la base de donn√©es...');
      await connection.execute(`CREATE DATABASE IF NOT EXISTS \`${config.database}\``);
      console.log('‚úÖ Base de donn√©es cr√©√©e');
    }
    
    // Use our database
    await connection.execute(`USE \`${config.database}\``);
    console.log(`‚úÖ Utilisation de la base "${config.database}"`);
    
    // Check tables
    console.log('üìã V√©rification des tables...');
    const [tables] = await connection.execute('SHOW TABLES');
    
    if (tables.length === 0) {
      console.log('‚ùå Aucune table trouv√©e !');
      console.log('üîß Les tables doivent √™tre cr√©√©es par l\'application');
      console.log('üí° Suggestion : Red√©marrez votre service principal sur Railway');
    } else {
      console.log('‚úÖ Tables existantes :');
      tables.forEach(table => {
        const tableName = table[`Tables_in_${config.database}`];
        console.log(`   - ${tableName}`);
      });
      
      // Check specific tables
      const requiredTables = ['accounts', 'orders', 'order_items', 'promotions', 'domicile_fees', 'stopdesk_fees'];
      const existingTables = tables.map(t => t[`Tables_in_${config.database}`]);
      
      console.log('üîç V√©rification des tables requises :');
      requiredTables.forEach(table => {
        if (existingTables.includes(table)) {
          console.log(`   ‚úÖ ${table}`);
        } else {
          console.log(`   ‚ùå ${table} (manquante)`);
        }
      });
      
      // Check data in key tables
      if (existingTables.includes('domicile_fees')) {
        const [domicileCount] = await connection.execute('SELECT COUNT(*) as count FROM domicile_fees');
        console.log(`üìä Frais domicile : ${domicileCount[0].count} entr√©es`);
      }
      
      if (existingTables.includes('stopdesk_fees')) {
        const [stopdeskCount] = await connection.execute('SELECT COUNT(*) as count FROM stopdesk_fees');
        console.log(`üìä Frais stopdesk : ${stopdeskCount[0].count} entr√©es`);
      }
      
      if (existingTables.includes('orders')) {
        const [orderCount] = await connection.execute('SELECT COUNT(*) as count FROM orders');
        console.log(`üìä Commandes : ${orderCount[0].count} entr√©es`);
      }
    }
    
    console.log('\nüéØ DIAGNOSTIC COMPLET');
    console.log('=' .repeat(50));
    
    if (tables.length === 0) {
      console.log('üîß ACTIONS REQUISES :');
      console.log('1. Red√©marrez votre service principal sur Railway');
      console.log('2. Ou ex√©cutez : curl -X POST .../api/populate-shipping');
      console.log('3. V√©rifiez les logs de d√©ploiement');
    } else {
      console.log('‚úÖ MySQL Railway est configur√© correctement !');
      console.log('üöÄ Votre base de donn√©es est pr√™te pour l\'application !');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur MySQL :', error.message);
    console.log('\nüîß SOLUTIONS :');
    
    if (error.code === 'ENOTFOUND') {
      console.log('- V√©rifiez que le service MySQL est actif sur Railway');
      console.log('- V√©rifiez le hostname dans DATABASE_URL');
    } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {
      console.log('- V√©rifiez les identifiants dans DATABASE_URL');
      console.log('- Recr√©ez la variable DATABASE_URL avec ${{MySQL.MYSQL_URL}}');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('- Le service MySQL n\'accepte pas les connexions');
      console.log('- Red√©marrez le service MySQL sur Railway');
    } else {
      console.log('- V√©rifiez les param√®tres SSL');
      console.log('- Consultez les logs du service MySQL sur Railway');
    }
    
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// Run diagnosis
diagnoseMySQLRailway().catch(console.error);
